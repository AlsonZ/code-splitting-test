{"version":3,"sources":["mountain-top-4k.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","test","setTest","About","React","lazy","Contact","Image","componentToLoad","Component","preload","preloadLazyLoad","useEffect","className","basename","process","to","fallback","onClick","hidden","src","img","alt","exact","path","component","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,6C,+MCsE5BC,MA9Df,WAEE,IAFa,EAQWC,oBAAS,GARpB,mBAQNC,EARM,KAQAC,EARA,KASPC,EAAQC,IAAMC,MAAK,kBAAM,gCACzBC,EAAUF,IAAMC,MAAK,kBAAM,gCAE3BE,EAVkB,SAACC,GACvB,IAAMC,EAAYL,IAAMC,KAAKG,GAE7B,OADAC,EAAUC,QAAUF,EACbC,EAOKE,EAAgB,kBAAK,gCAoBnC,OAhBAC,qBAAU,WAORV,GAAQ,KACR,IASA,yBAAKW,UAAU,OACb,kBAAC,IAAD,CAAQC,SAAUC,wBAChB,kBAAC,IAAD,CAAMC,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,WAAD,CAAUC,SACR,4CAMA,uBAAGC,QAnBK,WAGdhB,GAAQ,KAgBF,iBACA,yBAAKiB,QAAQ,GACVlB,GAAQ,yBAAKmB,IAAKC,IAAKR,UAAU,QAAQS,IAAI,cAEhD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWtB,IACtC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,WAAWC,UAAWnB,IAExC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASE,OAAQ,SAAAC,GAAK,OAAE,kBAACpB,EAAD,iBAAWoB,EAAX,CAAkBN,IAAKA,eCjDzDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dd261d00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mountain-top-4k.257c8a86.jpg\";","import React, { Suspense, useEffect, useState } from 'react';\nimport { Link, BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n// import About from './about.js';\n// import Contact from './contact.js';\n// import Image from './image.js';\nimport img from './mountain-top-4k.jpg';\nimport './App.css';\n\nfunction App() {\n\n  const preloadLazyLoad = (componentToLoad) => {\n    const Component = React.lazy(componentToLoad);\n    Component.preload = componentToLoad;\n    return Component;\n  }\n\n  const [test, setTest] = useState(false);\n  const About = React.lazy(() => import('./about.js'))\n  const Contact = React.lazy(() => import('./contact.js'))\n  // const Image = React.lazy(()=> import('./image.js'))\n  const Image = preloadLazyLoad(()=> import('./image.js'))\n  // const img = preloadLazyLoad(()=> import('./mountain-top-4k.jpg'))\n  // setTest(preloadLazyLoad(()=> import('./mountain-top-4k.jpg')))\n\n  useEffect(() => {\n    // console.log('yes?');\n    // Image.preload();\n    // img.preload();\n    // test.preload();\n    // setTest(test.preload());\n    // import img from './mountain-top-4k.jpg';\n    setTest(true);\n  },[])\n\n  const onClick = () => {\n    // console.log('yes');\n    // Image.preload();\n    setTest(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Link to=\"./about\">About </Link>\n        <Link to=\"./contact\">Contact </Link>\n        <Link to=\"./image\">Image </Link>\n        <Suspense fallback={\n          <div>\n            Loading...\n          </div>\n        }>\n          {/* <Image/> */}\n          {/* <img src={test} className=\"image\" alt=\"mountain\"/> */}\n          <p onClick={onClick}>click to load</p>\n          <div hidden={true}>\n            {test && <img src={img} className=\"image\" alt=\"mountain\"/>}\n          </div>\n          <Switch>\n            <Route exact path=\"/about\" component={About}/>\n            <Route exact path=\"/contact\" component={Contact}/>\n            {/* <Route exact path=\"/image\" component={Image}/> */}\n            <Route exact path=\"/image\" render={props=><Image {...props} img={img}/>}/>\n          </Switch>\n        </Suspense>\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}